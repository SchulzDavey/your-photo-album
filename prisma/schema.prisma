// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  followingIds  String[]
  Account       Account[]
  Session       Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Asset {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String?
//   width      Int?
//   height     Int?
//   url        String?
//   media_type String?
//   filter     String?
//   added_at   DateTime @default(now())
//   album      Album?   @relation(fields: [albumId], references: [id])
//   albumId    String?  @db.ObjectId
//   user       User?    @relation(fields: [userId], references: [id])
//   userId     String?  @db.ObjectId
//   Tag        Tag[]
// }

// model Album {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   name       String?
//   user       User?    @relation(fields: [userId], references: [id])
//   userId     String?  @db.ObjectId
//   asset      Asset[]
//   assetId    String?
//   created_at DateTime @default(now())
// }

// model Tag {
//   id      String  @id @default(auto()) @map("_id") @db.ObjectId
//   name    String?
//   assetId String? @db.ObjectId
//   asset   Asset?  @relation(fields: [assetId], references: [id])
// }
